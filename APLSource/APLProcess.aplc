:Class APLProcess
⍝ Start (and optionally dispose of) an APL Process.\\
⍝ By default the version of Dyalog APL a new process is going to be created from defines which version
⍝ of APL will be started, be it development or runtime.\\
⍝ You can change that by first creating a parameter space by calling `CreateParms`, then making the necessary
⍝ adjustments, and finally passing that namespace as parameter to `APLProcess.New`.\\
⍝ Notes
⍝ * This class is designed for test cases that require one or more additional instances of APL for some reason.
⍝ That's why it does not offer encryption for a RIDE.\\
⍝ This restriction might be lifted at a later stage depending on demand.
⍝ * The destructor of this class will attempt to kill the process that was started.
⍝ * In case any version of .NET is available it is used. Otherwise a command string is compiled and executed via
⍝ `⎕SH`. This comes with limitations, so .NET is recommended.
⍝ * You must not use `⎕NEW` with `APLProcess`; use `APLProcess.New` instead. If you wonder why that is:
⍝ Go to <https://toolofthought.com/donts> and then Ctrl+F to "Don't use a naked ⎕NEW".\\
⍝ ## Command line parameters
⍝ Command line parameters are something like `MAXWS=125MB`. They are defined differently depending on the OS
⍝ you are running on. `APLProcess` gives you an additional layer that simplifies the definitions of such pairs,
⍝ making it the same on all operating systems.
⍝ Example:\\
⍝ ```
⍝ parms←APLProcess.CreateParms
⍝ parms.ConfigParms⍪←'MAXWS' '125MB'
⍝ ```
⍝ ## Options
⍝ Options start either with a `+` or a `-`. Specify them as a vector of simple char vectors on `Options`
⍝ Example:\\
⍝ ```
⍝ parms←APLProcess.CreateParms
⍝ parms.Options,←⊂'-Dc'
⍝ ```
⍝ Notes:
⍝ * `+s` and `-s` are managed by `APLProcess`
⍝ * `-q` is managed by `APLProcess`
⍝ * `-x` is managed via the `LX` parameter, see there\\
⍝ ## Simple application
⍝ ```
⍝ parms←APLProcess.CreateParms
⍝ parms.Runtime←1
⍝ parms.Wait←0
⍝ (myProcess←APLProcess.New parms).HasExited
⍝ 0
⍝ ⎕DL 10
⍝ myProcess.HasExited
⍝ 1
⍝ ```

    ⎕IO←1 ⋄ ⎕ML←1

    ∇ r←Version
    ⍝ Returns the version number from `TatinVars` if possible.
    ⍝ See also `History`
      :Access Public Shared
      :If 0<##.⎕NC'TatinVars.CONFIG'
          r←(⎕JSON⍠('Dialect' 'JSON5')⊢##.TatinVars.CONFIG).version
      :Else
    ⍝ When a script was not loaded with Tatin, there will be no namespace `TatinVars`.
    ⍝ In such cases we cannot provide a version number, so we return just ''.
          r←''
      :EndIf
    ∇

    ∇ r←History
      :Access Public Shared
    ⍝ * 0.10.0 from 2025-07-30
    ⍝   * Configuration parameters (like MAXWS=128MB) must now be specified via the two-column matrix `ConfigParms`
    ⍝   * Options (like -Dc) must now be specified via `Options` as a vector of simple vectors
    ⍝   * If any version of .NET is available on any OS, it is used
    ⍝   * `OUT_FILE` renamed to `OutputFilename`
    ⍝   * If .NET is not used, an additional name "APLPROCESS_NAMES" is exported holding a simicolon-separated
    ⍝     list with all (other) exported names defined by the user of `APLProcess`.
    ⍝   * Parameter `LX` added that defaults to 1, meaning that "-x" is NOT added.
    ⍝   * New parameter "DontUseDotNET" introduced
    ⍝   * Bug fixes
    ⍝     * -run removed as an option
    ⍝     * Handling of -s / +s corrected
    ⍝ * 0.9.0 from 2025-07-21
    ⍝   * Potentially breaking changes since version 0.8.0
    ⍝   * The option to pass a command line string to the constructor has been removed
    ⍝   * `IsNetCore` was renamed to `UseDotNetCore`
    ⍝   * Property `LogFilename` was removed
    ⍝   * Method `GetLog` was removed
    ⍝   * You must use `APLProcess.New` rather than `⎕NEW` for creating an instance
    ⍝   * Tests amended
    ⍝   * `Make` polished
    ⍝   * Packages updated (development only)
    ⍝   * Bug fixes
    ⍝     * `History` did not work when called
    ⍝     * Now works reliably on Mac OS except with the runtime (not an `APLProcess problem)
    ⍝     * Now works reliably on Linux
    ⍝     * `ExitCode` fixed
      r←↑{⍵↓⍨+/∧\∧⌿(↑⍵)=' '}{⍵↓⍨⍵⍳'⍝'}¨{⍵/⍨'⍝'=⊃¨⍵}{⍵↓⍨+/∧\(↑⍵)=' '}¨1↓↓180⌶'History'
    ∇

    :Field Public Instance Options←'' ⍝ For stuff like -Dc
    :Field Public Instance ConfigParms←'' ⍝ Key-value parms (like `1 2⍴('MAXWS' '128MB')`)
    :Field Public Instance WorkspaceName←'' ⍝ Name of the workpsace to be loaded.
    :Field Public Instance Exe←'' ⍝ The Dyalog EXE started by `APLProcess`.
    :Field Public Instance Proc←⎕NS '' ⍝ Instance of the .NET class `Diagnostics.Process`.
    :Field Public Instance Runtime←0 ⍝ Boolean. Only set this if no EXE is specified.
    :Field Private Shared _Wait←1 ⍝ The default.
    :Field Public Shared WindowsStyleDefault←'Minimized' ⍝ Only test cases should change this. As a consumer of this class use the Property `WindowsStyle`

    :Property Wait
    :Access Public Instance
        ⍝ Defines whether a process is started independently (`Wait←0`) or not (`Wait←1`)
        ∇ r←get
          r←_Wait
        ∇
    :EndProperty

    :Property WindowsStyle
    :Access Public Instance
        ∇ r←get
          r←_WindowsStyle
        ∇
    :EndProperty

    :Property ExitCode
    ⍝ The exit code of the process. ¯1 means undefined.
    ⍝ * If `wait` is 1 then `ExitCode` is meaningful
    ⍝ * If `wait` is 0 then `ExitCode` is only meaningful on Windows\\
    ⍝ `ExitCode` is the value that is passed to `⎕OFF` in the process created by `APLProcess`
    :Access Public Instance
        ∇ r←get;flag
          :If 0≠Proc.⎕NC⊂'ExitCode'
              flag←0
              :Repeat
                  :Trap 0
                      r←Proc.ExitCode
                      flag←1
                  :Else
                      ⎕DL 0.2
                  :EndTrap
              :Until flag
          :Else
              r←_ExitCode
          :EndIf
        ∇
    :EndProperty

    ∇ make parmSpace;b
      :Access Public Instance
      :Implements Constructor
      'Please use the method APLProcess.New rather than ⎕NEW'Assert'APLProcess.New'≡{⌽{⍵/⍨2>+\'.'=⍵}⌽⍵}{⍵↓⍨⍵⍳'.'}⊃1↓⎕XSI
      :Trap 0
          parmSpace←⊃⊃parmSpace
          'Right argument is not a valid parameter space'Assert(' '~⍨¨↓parmSpace.⎕NL 2){(∧/⍺∊⍵)∧(∧/⍵∊⍺)}' '~⍨¨↓CreateParms.⎕NL 2
      :EndTrap
      make_common
      'Invalid window style'Assert(⊂parmSpace.WindowsStyle)∊'Hidden' 'Maximized' 'Minimized' 'Normal'
      :If 0<≢parmSpace.Exe
          ('The specified EXE cannot be found: ',parmSpace.Exe)Assert ⎕NEXISTS parmSpace.Exe
      :EndIf
      (RidePort OutputFilename WorkspaceName ConfigParms Options _Wait)←parmSpace.(RidePort OutputFilename WorkspaceName ConfigParms Options Wait)
      WorkspaceName~←'"'
      :If 0<≢WorkspaceName
          ('The specified workspace cannot be found: ',WorkspaceName)Assert ⎕NEXISTS WorkspaceName
      :EndIf
      ('Invalid parameter: ',{0=≢⍵:⍵ ⋄ ⊃{⍺,', ',⍵}/⍵}(~b)/parmSpace.⎕NL-2)Assert∧/b←(parmSpace.⎕NL-2)∊{⍵.⎕NL-2}CreateParms
      '"ConfigParms" must be empty or a two-column matrix'Assert(0=≢parmSpace.ConfigParms)∨2=⍴⍴parmSpace.ConfigParms
      Start parmSpace
    ∇

    ∇ r←New parmSpace;rt;cmd;ws;windowStyle;buff
      ⍝ `parmSpace` is a parameter namespace, usually created by calling `CreateParms`; see there.
      :Access Public Shared
      r←⎕NEW ⎕THIS(,⊂parmSpace)
    ∇

    ∇ make_common;Platform
      _WindowsStyle←WindowsStyleDefault
      _ExitCode←¯1
      OS←##.##.OS
    ∇

    ∇ Start ps;Z;buff;cmd;configParms;exe;host;keyfile;names;options;output;pid;port;psi;qdmx;z;ride
      :If 0=≢ps.Exe
          ps.Exe←(GetRuntimeName⍣ps.Runtime)GetCurrentExecutable ⍝ else, deduce it
      :Else
          :If 'Win'≡GetOperatingSystem
              ps.Runtime←'rt.exe'≡¯6↑ps.Exe~'"'
          :Else
              ps.Runtime←'.rt'≡¯3↑ps.Exe
          :EndIf
      :EndIf
      Exe←ps.Exe
      configParms←ps.ConfigParms
      options←ps.Options
      :If 0<≢ps.OutputFilename
          configParms⍪←'LOG_FILE'ps.OutputFilename
      :EndIf
      output←(1+×≢OutputFilename)⊃'/dev/null'OutputFilename
      Proc.LogFilename←(739⌶0),'/APLProcess-Logfile-',{⎕RL←+/⎕TS ⋄ ⍕?⍵}100000
      :If 1∧.≤2↑2250⌶0 ⍝ When .NET is available, we use it; always true on Windows
      :AndIf (~ps.DontUseDotNET)∨'Win'≡GetOperatingSystem
          :If 0≠ps.RidePort
              configParms⍪←'RIDE_INIT'('SERVE:*:',⍕ps.RidePort)
              configParms⍪←'RIDE_SPAWNED' 1
          :Else
              configParms⍪←'RIDE_INIT' ''
          :EndIf
          :If ~ps.Runtime
              :If (,0)≡,ps.SessionFile
                  configParms⍪←'session_file' ''
              :ElseIf (,1)≡,ps.SessionFile
                  ps.SessionFile←GetDefaultDseFilename ps.Exe
                  configParms⍪←'session_file'ps.SessionFile
              :ElseIf ' '=1↑0⍴ps.SessionFile
                  configParms⍪←'session_file'ps.SessionFile
              :Else
                  'Invalid parameter: "SessionFile"'Assert 0
              :EndIf
          :EndIf
          :If ~ps.LX
              options,←⊂'-x'
          :EndIf
          :If ps.DYALOG_NOPOPUPS
              configParms⍪←'DYALOG_NOPOPUPS'ps.DYALOG_NOPOPUPS
          :EndIf
          names←1↓⊃,/';',¨configParms[;1]
          ⎕USING←UsingSystemDiagnostics
          cmd←⊃,/' ',¨options
          cmd,←MakeConfigParmsCmdReady configParms
          psi←⎕NEW Diagnostics.ProcessStartInfo,⊂ps.Exe(({0=≢⍵:⍵ ⋄ '"',(⍵~'"'),'" '}ps.WorkspaceName),cmd)
          psi.WindowStyle←Diagnostics.ProcessWindowStyle.⍎ps.WindowsStyle
          Proc←Diagnostics.Process.Start psi
          :If ps.Wait
              Proc.WaitForExit ⍬
          :EndIf
      :Else
        ⍝ If we get here, it is always a non-Windows platform
          names←''
          :If 0=ps.RidePort
              ride←'RIDE_INIT=""'
          :Else
              ride←'RIDE_INIT="SERVE:*:',(⍕ps.RidePort),'" RIDE_SPAWNED=1 '
          :EndIf
          cmd←({0=≢⍵:⍵ ⋄ ⍵,' '}ride),'"',ps.Exe,'"'
          cmd,←{0=≢⍵:⍵ ⋄ ' "',⍵,'"'}ps.WorkspaceName
          options←(options~'+s' '-s' '+q' '-q' '-x'),'+s' '-q',(~ps.LX)/⊂'-x'  ⍝ Populate session, don't quit on error, no ⍎⎕LX
          cmd,←⊃,/' ',¨options
          cmd,←MakeConfigParmsCmdReady configParms
          names,←(0=≢names)↓⊃,/';',¨configParms[;1]
          cmd←'APLPROCESS_NAMES="',names,'" ',cmd
          :If ~ps.Wait
              cmd,←' -c APLppid=',⍕GetCurrentProcessId
          :EndIf
          cmd,←' 0</dev/null'
          cmd,←' 1>',output
          cmd,←' 2>',Proc.LogFilename
          :If ps.Wait
            ⍝ On non-Windows platforms, passing an argument to ⎕OFF that is not 0 will cause ⎕SH to throw a DOMAIN ERROR
            ⍝ The numeric code at the end of the error message might be what was passed to ⎕OFF,but when the command as
            ⍝ such was rejected,the shell might return something like 133,and you cannot establish the difference.
              :Trap 11
                  Z←⎕SH cmd
                  _ExitCode←0
              :Else
                  qdmx←⎕DMX
                  _ExitCode←{{⊃⊃(//)⎕VFI⌽⍵↑⍨¯1+⍵⍳' '}⌽⍵}qdmx.Message
              :EndTrap
              Proc.HasExited←1
              Proc.Id←0
          :Else
              cmd,←' & echo $!'
              pid←⎕SH cmd
              ⎕DL 0.2
              Proc.Id←⊃⊃(//)⎕VFI∊pid
              Proc.HasExited←0
          :EndIf
          Proc.StartTime←⎕TS
      :EndIf
    ∇

    ∇ Close;count;limit
      :Access Public Instance
      Close_
    ∇

    ∇ Close_;count;limit
      :Implements Destructor
      WaitForKill&(5×Wait)0.2 ⍝ Start a new thread to do the dirty work
    ∇

    ∇ r←CreateParms
      :Access Public Shared
    ⍝ Creates a parameter namespace that will be accepted by the constructor.
    ⍝ | Name | Description |
    ⍝ |------------------|-------------|
    ⍝ | `ConfigParms` | Matrix with names in [;1] and values in [;2] like `1 2⍴'MAXWS' '125MB'|
    ⍝ | `DontUseNDotNET` | Defaults to 0, ignored on Windows. Mainly for test cases.|
    ⍝ | `DYALOG_NOPOPUPS`| Defaults to 1 only in Runtime. Ignored on non-Windows platforms.|
    ⍝ | `Exe` | Defaults to `''` which means that the same EXE is executed the instance was created from. Can also be a fully qualified name of the exe to be run.|
    ⍝ | `LX` | Defaults to 1, meaning that "-x" is NOT added to the command line
    ⍝ | `Options` | Empty or a nested vector with options like `-Dc`; Note that -s/+s and -q are handled automatically. |
    ⍝ | `OutputFilename` | By default empty, meaning that any output is thrown away. If this is specified it is expected to be the name of a file.|
    ⍝ | `RidePort` | By default 0 (no effect). When a positive integer > 0 this is used as port number for `RIDE_INIT`.|
    ⍝ | `Runtime` | Boolean that defaults to 0. Is ignored in case `Exe` is not empty.|
    ⍝ | `SessionFile` | Windows only. Defaults to 0 which means no session file is loaded. A 1 will load the default DSE file. May also be the fully qualified path to a DSE file.|
    ⍝ | `Wait` | Boolean that defaults to 1, meaning that `APLProcess` waits for the process to quit; 0 means it runs independently.|
    ⍝ | `WindowStyle` | Windows only. Defaults to "Minimized". May be "Hidden" or "Maximized" or "Normal" instead. Is case sensitive!|
    ⍝ | `WorkspaceName` | By default empty; the fully qualified name of the workspace to be loaded.|
      r←⎕NS''
      r.ConfigParms←0 2⍴''
      r.DontUseDotNET←0
      r.DYALOG_NOPOPUPS←'Win'≡3↑GetOperatingSystem
      r.Exe←''
      r.LX←1
      r.Options←''
      r.OutputFilename←''
      r.RidePort←0
      r.Runtime←0
      r.SessionFile←0
      r.WindowsStyle←WindowsStyleDefault
      r.WorkspaceName←''
      r.Wait←1
      r.⎕FX'r←∆List;⎕IO' '⎕IO←⎕ML←1' 'r←{(⍵,[1.5]⎕nc¨⊂¨⍵),⍎¨⍵}(⊂''∆List'')~⍨⎕NL-2 9 3' ⍝ Vars, refs and niladic functions
    ∇

    ∇ WaitForKill(limit interval);count
      :If 0<≢Proc.⎕NL-2
          :If ~{0::1 ⋄ ⍵.HasExited}Proc
              count←0
              :While ~Proc.HasExited
                  {}⎕DL interval
                  count←count+1
              :Until (~Proc.HasExited)∧count>limit
              :AndIf ~Proc.HasExited
    ⍝ OK, force has to be used
              :Trap 11
                  {}##.##.OS.KillPID Proc.Id
              :EndTrap
          :EndIf
      :EndIf
    ∇

    ∇ r←GetCurrentExecutable;⎕USING;t;gmfn
      :If 'Win'≡GetOperatingSystem
          r←''
          'gmfn'⎕NA'U4 kernel32|GetModuleFileName* P =T[] U4'
          r←⊃⍴/gmfn 0(1024⍴' ')1024
          :If 0=≢r
              ⎕USING←UsingSystemDiagnostics
              r←2 ⎕NQ'.' 'GetEnvironment' 'DYALOG'
              r←r,(~(¯1↑r)∊'\/')/'/' ⍝ Add separator if necessary
              r←r,(Diagnostics.Process.GetCurrentProcess.ProcessName),'.exe'
          :EndIf
      :Else
          t←⊃1↓⎕SH'ps -o args -p $PPID'
          :If '"'''∊⍨⊃t ⍝ if command begins with ' or "
              r←{⍵/⍨{∧\⍵∨≠\⍵}⍵=⊃⍵}t
          :Else
              r←{⍵↑⍨¯1+1⍳⍨(¯1↓0,⍵='\')<⍵=' '}t ⍝ otherwise find first non-escaped space (this will fail on files that end with '\\')
          :EndIf
      :EndIf
    ∇

    ∇ r←GetRuntimeName exe
    ⍝ Assumes that:
    ⍝ Windows runtime ends in "rt.exe"
    ⍝ *NIX runtime ends in ".rt"
      r←exe
      :If 'Win'≡GetOperatingSystem
          :If 'rt.exe'≢¯6↑{('rt.ex',⍵)[⍵⍳⍨'RT.EX',⍵]}exe ⍝ deal with case insensitivity
              r←'rt.exe',⍨{(~∨\⌽<\⌽'.'=⍵)/⍵}exe
          :EndIf
      :Else
          r←exe,('.rt'≢¯3↑exe)/'.rt'
      :EndIf
    ∇

    ∇ r←HasExited
      :Access Public Instance
    ⍝ Boolean that is 1 if and only if the process started by `APLProcess` has stopped running.
    ⍝ Under Windows .NET tells us. On non-Windows platforms we need to check.
      r←0=≢Proc.Id OS.GetTaskList 0 0 0
    ∇

    ∇ r←GetPID
      :Access Public Instance
    ⍝ Get process ID of the current process
      r←Proc.Id
    ∇

    ∇ {success}←KillItself;proc;qdmx;pid
      :Access Public Instance
    ⍝ Attempts to stop the process.\\
    ⍝ `success` is 1 in case the process could be stopped, otherwise 0.
      success←0
      pid←Proc.Id
      success←OS.KillPID pid
    ∇

    ∇ r←GetDefaultDseFilename exe;name;path
      name←{⍵↑⍨1+-⌊/(⌽⍵)⍳'/\'}2 ⎕NQ #'GetEnvironment' 'Session_file'
      path←{⍵↓⍨1+-⌊/(⌽⍵)⍳'/\'}exe
      r←path,name
    ∇

    Assert←{⍺←'' ⋄ (,1)≡,⍵:r←1 ⋄ ⎕ML←1 ⋄ ⍺ ⎕SIGNAL 1↓(⊃∊⍵),11}

    ∇ r←UseDotNetCore
      :Access public shared
      r←(,'1')≡,2 ⎕NQ'.' 'GetEnvironment' 'DYALOG_NETCORE'
    ∇

    ∇ r←UsingSystemDiagnostics
      :Access public shared
      r←(1+UseDotNetCore)⊃'System,System.dll' 'System,System.Diagnostics.Process'
    ∇

    ∇ r←GetOperatingSystem
    ⍝ Returns one of: "Win", "Mac", "AIX", "Lin" etc.\\
    ⍝ Note that under Linux you might need more information.
      r←3↑⊃'.'⎕WG'APLVersion'
    ∇

    ∇ r←MakeConfigParmsCmdReady configParms
      :If 0=≢configParms
          r←''
      :Else
          r←{0=≢⍵:⍵ ⋄ ∧/⎕D∊⍨'''"'~⍨⍕2⊃⍵:(⍕¨⍵)~¨⊂'''"' ⋄ (1⊃⍵)('"',('"'''~⍨2⊃⍵),'"')}¨↓configParms
          r←⊃¨{⍺,'=',⍵}/¨r
          r←⊃,/' ',¨r
      :EndIf
    ∇

    ∇ r←GetCurrentProcessId;t
      :Access Public Shared
      :If 'Win'≡GetOperatingSystem
          r←⊃(//)⎕VFI't'⎕NA'U4 kernel32|GetCurrentProcessId'
      :Else
          :Trap 0
              r←Proc.Pid
          :Else
              r←⊃(//)⎕VFI⊃⎕SH'echo $PPID'
          :EndTrap
      :EndIf
    ∇

:EndClass
