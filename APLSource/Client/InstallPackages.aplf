 r←{noBetas}InstallPackages(identifiers targetFolder);forceClose;isUCMD;identifier_;alias;identifier;targetFolder_;packageID;cfg;ucScriptName;qdmx;registry
⍝ Install package(s) `identifiers` in `targetFolder`.\\
⍝ `identifiers` must be a simple char vector holding the package IDs (possibly incomplete) for one or more packages.
⍝ Multiple packages must be separated by commas.
⍝ `targetFolder` must be one of:
⍝ * Path to a folder
⍝ * [MyUCMDs] (case independent)\\
⍝   In this case you may or may not specify the name of a sub-folder after `[MyUCMDs`]`; if you don't then the name of the package rules.
⍝ `identifierd` must be one (or more) of:
⍝ * an HTTP request for a package
⍝ * a ZIP file holding a package
⍝ * a folder holding a package (like file://C:\Temp\group-name-version\\)
⍝ * a path to a package in a registry (like [RegistryAlias]{group}-{name}-{major.minor.patch} or C:\MyReg\{group}-{name}-{major.minor.patch})
⍝ * a package ID; Tatin will then attempt to find that package in the Registries defined in the Client's config file.\\
⍝ * The internal alias [MyUCMDs] (case independent). This installs the package(s) into a folder MyUCMDs/packages
⍝ You may omit minor+patch or even major+minor+patch in order to install the latest version.
⍝ By default beta versions are considered in case the package ID is incomplete, but you can suppress them by passing 0 as ⍺.\\
⍝ `←` Full name of principal packages finally installed, including an alias if specified.
 r←''
 noBetas←{0<⎕NC ⍵:⍎⍵ ⋄ Reg.GetNoBetasDefault}'noBetas'
 identifiers←','(≠⊆⊢)identifiers
 forceClose←~EstablishEmptyPermanentConnections 0
 isUCMD←'[myucmds]'{⍺≡⎕C(≢⍺)↑⍵}targetFolder
 :If ~isUCMD
     'Invalid target folder: must not contain "[]" (except for [MyUCMDs])'Assert~∨/'[]'∊targetFolder
 :EndIf
 :If isUCMD∧1<≢identifiers
     'You must not specify a name after [MyUCMDs] when installing more than one package'Assert 0=≢(≢'[myucmds]')↓targetFolder
 :EndIf
 :Trap ((⊂,##.Client.DEBUG)∊,¨'on' 1)↓Reg.ErrorNo
     :For identifier_ :In identifiers
         (alias identifier_)←SplitAtAlias identifier_
         ('Invalid alias: ',identifier_)Assert(,'@')≢alias
         identifier←ReplaceRegistryAlias identifier_
         ('Unknown',(∧/'[]'∊identifier_)/' alias')Assert 0<≢identifier
         identifier←noBetas CheckVersion identifier
         :If 0=≢identifier    ⍝ Not found?
             1 PrintToSession'Not found: ',identifier_
             :Continue
         :EndIf
         :If isUCMD
             :If 0=≢{⍵↓⍨⍵⍳']'}targetFolder
                 :If IsHTTP identifier
                     targetFolder_←GetMyUCMDsFolder{'-'∊⍵:⍵↓⍨⍵⍳'-' ⋄ ⍵}{'/'∊⍵:⍵↓⍨⍵⍳'/' ⋄ ⍵}RemoveHttpProtocol Reg.RemoveVersionNumber identifier
                 :Else
                     targetFolder_←GetMyUCMDsFolder{'-'∊⍵:⍵↓⍨⍵⍳'-' ⋄ ⍵}Reg.RemoveVersionNumber 2⊃⎕NPARTS identifier
                 :EndIf
             :Else
                 targetFolder_←GetMyUCMDsFolder'/',{⍵↓⍨⍵⍳']'}targetFolder
             :EndIf
         :Else
             targetFolder_←targetFolder
         :EndIf
         packageID←GetPackageIDFrom identifier
         {}{'Unable to create target directory'Assert F.MkDir ⍵}⍣(~F.IsDir targetFolder_)⊢targetFolder_
         :If 0=≢identifier    ⍝ Not found?
             1 PrintToSession'Not found: ',identifier_
             :Continue
         :EndIf
         PrintToSession'  Attempting to install ',identifier,'...'
         :If ∧/~'\/'∊identifier
         :AndIf '.zip'≢⎕C ¯4↑identifier
             :If ~∨/'/\:'∊identifier
                 (registry packageID)←EstablishRegistry packageID
                 ('>>> ',packageID,' not found anywhere')Assert 0<≢registry
                 identifier←registry{'/'=¯1↑⍺:⍺,⍵ ⋄ ⍺,'/',⍵},packageID
                 :If 0=≢(-≢packageID)↓identifier
                     :Continue
                 :EndIf
                 PrintToSession⊃{'Installing <',⍵,'> from Registry ',⍺,'...'}/{⍵{(⍵↓⍺)(⍵↑⍺)}1+-'/'⍳⍨⌽⍵}identifier
             :EndIf
         :EndIf
         :If '.zip'≡⎕C ¯4↑identifier
         :AndIf Reg.IsHTTP identifier
             CloseConnections forceClose
             'ZIP files cannot be installed via HTTP'Assert 0
         :EndIf
         PrintToSession'  Establish dependencies...'
         r,←targetFolder_ InstallPackage_ alias identifier
         packageID←GetPackageIDFrom identifier
         cfg←GetPackageConfigFileAsNS targetFolder_,'/',packageID,'/',CFG_Name
         :If 0<≢cfg.userCommandScript
             ucScriptName←⊃,/1↓⎕NPARTS cfg.userCommandScript
             :If Reg.F.IsFile targetFolder_,'/',ucScriptName
                 Reg.F.DeleteFile targetFolder_,'/',ucScriptName  ⍝ Probably a re-install
             :EndIf
             ⍝ Move the user command script to the root of the install folder (usually something like [MyUCMDs])
             (targetFolder_,'/')(⎕NMOVE Reg.F.ExecNfunction)targetFolder_,'/',packageID,'/',ucScriptName
         :EndIf
     :EndFor
     CloseConnections forceClose
 :Else
     qdmx←⎕DMX
     CloseConnections forceClose
     (⊃{0=≢⍺:⍵ ⋄ ⍺}/qdmx.(Message EM))⎕SIGNAL{⍺=0:⍵ ⋄ ⍺}/qdmx.(ENX EN)
 :EndTrap
⍝Done
