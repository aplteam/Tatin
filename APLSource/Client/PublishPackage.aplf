 {(statusCode errMsg zipFilename)}←{dependencies}PublishPackage(source registry);uri;cfgFilename;cfg;packageID;name;group
⍝ Publishes a package.\\
⍝ 1. Checks for uniqueness of the given package/version combination.
⍝ 2. Creates a dependency file for the package if required
⍝ 3. Creates a zip file for the package in a temp folder if required
⍝ 4. Moves the zip file into the Registry, either via HTTP or locally.
⍝ 5. Updates the Registry index in case it's a local Registry
⍝ Note that if ⍵ points already to a ZIP file it is **moved** into the Registry.\\
⍝ `⍵` must be a two-item vector:
⍝ 1. `source` → folder to create package from
⍝ 2. `registry` → registry to publish package to (alias or uri)
⍝ ## The explicit result
⍝ * `statusCode` is an HTTP no matter whether it is an HTTP call or not.
⍝ * `errMsg` is empty if `statusCode` is 200, otherwise it is additional informartion.
⍝ * `zipFilename` is empty in case `source` is a ZIP file, but the name of the ZIP file created along the way otherwise.
 statusCode←200 ⋄ errMsg←''
 dependencies←{0<⎕NC ⍵:⍎⍵ ⋄ ''}'dependencies'
 uri←F.EnforceSlash ReplaceRegistryAlias registry
 'No URI provided'Assert 0<≢uri
 'Not just a Registry'Assert uri≡RemovePackageID uri
 'Unknown Registry'Assert(⊂EnforceTrailingSlash uri)∊⊃¨{0≡⍵:⍺ ⋄ (¯1↓⍺),':',(⍕⍵),'/'}/¨MyUserSettings.registries.(uri port)
 (name group)←'-'(≠⊆⊢)Reg.RemoveVersionNumber{2⊃⎕NPARTS ⍵↓⍨-'/\'∊⍨¯1↑⍵}source
 'Invalid package name: only ASCII characters and digits and _ are allowed'Assert PackageNameIsOkay name
 'Invalid group name: only ASCII characters and digits and _ are allowed'Assert PackageGroupNameIsOkay group
 source←RemoveFileProtocol source  ⍝ Precaution
 zipFilename←dependencies PackIfFolder source
 'Invalid URI specified: not a zip file'Assert'.zip'≡⎕C ¯4↑zipFilename
 :If Reg.IsHTTP uri
     PublishPackageToRemoteRegistry_ zipFilename registry
     ⍝PublishPackageToRemoteRegistry_2 zipFilename registry
 :Else
     PrintToSession'  Read config file for ',source,'...'
     cfgFilename←1 F.NormalizePath({F.IsDir ⍵:⍵ ⋄ 1⊃⎕NPARTS ⍵,CFG_Name}source),'/',CFG_Name
     :If F.IsFile cfgFilename
         cfg←GetPackageConfigFileAsNS cfgFilename
         PrintToSession'  Attempting to publish ',source,'...'
         packageID←cfg.group,'-',cfg.name,'-',cfg.version
     :Else
         packageID←2⊃⎕NPARTS source
     :EndIf
     (statusCode errMsg)←Reg.PublishPackage zipFilename uri
     :If 200≠statusCode
     :AndIf '.zip'≢⎕C⊃¯1↑⎕NPARTS source
         PrintToSession'  Cleaning up temp file...'
         F.DeleteFile zipFilename
         zipFilename←''
     :EndIf
 :EndIf
⍝Done
