 (list msg)←UnInstallPackages(packageID folder);pkgDepFilename;toBeRemoved;rc;bool;principalPkgs;buildList_old;packages;noOf;noOfComponents;buff;cleanup;cfg;writeDependencyFile
 ;packageID_2;buildList_old;b;buildList_new;installedPkgs;newPrincipalPkgs
⍝ If `folder` carries a dependency file then this function attempts to un-install the package
⍝ `packageID` and all its dependencies but only in case those are neither top-level packages nor
⍝ required by other packages.\\
⍝ A package that has an alias must be uninstalled with the alias.\\
⍝ If `packageID` is empty a clean-up attempt is made, meaning that all packages that are not required
⍝ anymore are removed from the folder.\\
⍝ To keep things simple Tatin performs the following steps:
⍝  1. Checks whether the package is mentioned in the dependency file. If not an error is thrown.
⍝  3. Removes `packagedID` from the dependency file.
⍝  4. Re-compiles the build list based on the new dependency file.
⍝  5. Removes all packages that are not mentioned in the build list anymore\\
⍝ `folder` can be one of:
⍝ * Any folder that carries a file apl-dependencies.txt
⍝ * The (case independent) string `[MyUCMDs]`\\
⍝   In this case Tatin attempts to un-install the given package from the MyUCMDs/ folder
⍝ Returns a two-item vector:
⍝ 1. List with the fully qualified names of all removed packages; might carry an alias
⍝ 2. Message, ideally empty.\\
⍝ Notes:
⍝ * Removing the directories hosting the packages might fail for all sorts of reasons even though the
⍝   package & dependencies were already successfully removed from both dependency file and build list
⍝ * The search for package names is case independent
 list←msg←''
 :If '[myucmds]'{⍺≡⎕C(≢⍺)↑⍵}folder
     :If 0=≢buff←(≢']MyUCMDs]')↓folder
         folder←GetMyUCMDsFolder{'-'∊⍵:⍵↓⍨⍵⍳'-' ⋄ ⍵}RemoveHttpProtocol Reg.RemoveVersionNumber packageID
     :Else
         folder←GetMyUCMDsFolder,'/',buff
     :EndIf
 :EndIf
 ('Not found: ',LF,folder)Assert F.IsDir folder
 folder←Reg.AddSlash folder
 pkgDepFilename←folder,Reg.DependenciesFilename
 'The folder has no dependency file'Assert F.IsFile pkgDepFilename
 principalPkgs←(1⊃F.NGET pkgDepFilename 1)~⊂''
 (Reg.DependenciesFilename,' is empty')Assert 0<≢principalPkgs
 :If 0<≢packageID
 :AndIf '@'∨.=¯2↑⌽¯1⌽packageID
     packageID_2←IdentifyInstalledPackageID principalPkgs packageID
     :If 0=≢packageID_2
         msg←'Package is not installed'
         :Return
     :EndIf
 :Else
     packageID_2←packageID
 :EndIf
 buildList_old←LoadBuildList folder
 :If 0<≢packageID_2
     noOfComponents←packageID_2+.='-'
     :If noOfComponents∊0 1
         :If noOfComponents=0
             noOf←+/b←∨/¨('-',(⎕C packageID_2),'-')∘⍷¨⎕C buildList_old[;2]
         :Else
             noOf←+/b←(packageID_2,'-'){⎕C((≢⍺)↑[2]⍵)∧.=⍺}(↑buildList_old[;2])
         :EndIf
         :If 0=noOf
             list←''
             msg←'Package is not installed'
             :Return
         :EndIf
         ('Found ',(⍕noOf),' times: ',packageID_2,'; specify <group>')Assert 1=noOf
         packageID_2←2⊃buildList_old[b⍳1;]
     :EndIf
 :EndIf
 cleanup←1
 writeDependencyFile←0
 newPrincipalPkgs←principalPkgs
 :If 0<≢packageID_2
     :If (⊂packageID_2)∊buildList_old[;2]
         :If ~(⊂packageID_2)∊principalPkgs
             msg←'Cannot uninstall: is not a principal package'
             :Return
         :EndIf
         newPrincipalPkgs~←⊂packageID_2
         writeDependencyFile←1 ⍝ We write later in case of a connectivity problem
     :Else
         cleanup←0
     :EndIf
 :EndIf
 :If 0=≢newPrincipalPkgs
     cfg←GetPackageConfigFileAsNS folder,RemoveAlias packageID_2
     :If 0<cfg.⎕NC'userCommandScript'
     :AndIf 0<≢cfg.userCommandScript ⍝ Is it a user command?!
         F.DeleteFile folder,⊃,/1↓⎕NPARTS cfg.userCommandScript
     :EndIf
     F.RmDir folder,RemoveAlias packageID_2
     F.DeleteFile folder∘,¨'apl-buildlist.json' 'apl-dependencies.txt'
    ⍝ ↓ This may happen when the last user command package was un-installed, for example:
     :If 0=≢⊃F.Dir folder,'/*'
         (rc msg)←F.RmDirByForce folder
     :EndIf
     list,←⊂packageID_2
 :Else
     :If 0<≢packageID_2
         :If 0=⎕NEXISTS folder,RemoveAlias packageID_2
             msg←'Package is not installed'
             →cleanup←0
         :EndIf
         cfg←GetPackageConfigFileAsNS folder,RemoveAlias packageID_2
         :If 0<cfg.⎕NC'userCommandScript'
         :AndIf 0<≢cfg.userCommandScript ⍝ Is it a user command?!
             F.DeleteFile folder,⊃,/1↓⎕NPARTS cfg.userCommandScript
         :EndIf
     :EndIf
     buildList_new←1 CompileBuildList folder newPrincipalPkgs
     :If (⊂packageID_2)∊RemoveAlias¨buildList_new[;2]
     :AndIf ~(⊂packageID_2)∊buildList_new[;2]
         msg←'Cannot uninstall: package has an alias assigned'
         cleanup←0
     :Else
         :If 0<≢packageID_2
         :AndIf ~(⊂RemoveAlias packageID_2)∊RemoveAlias¨newPrincipalPkgs
             :If F.IsDir folder,RemoveAlias packageID_2
                 F.RmDir folder,RemoveAlias packageID_2
                 list←,⊂packageID_2
             :Else
                 msg←'Package is not installed'
                 cleanup←0
             :EndIf
         :EndIf
     :EndIf
     :If writeDependencyFile
         (⊂newPrincipalPkgs)F.NPUT pkgDepFilename 1
     :EndIf
     :If cleanup
         installedPkgs←(≢folder)↓¨F.ListDirs folder
     :AndIf 0<≢toBeRemoved←installedPkgs~RemoveAlias¨buildList_new[;2],⊂packageID_2
         F.RmDir folder∘,¨RemoveAlias¨toBeRemoved
         list,←toBeRemoved~list
     :EndIf
 :EndIf
⍝Done
