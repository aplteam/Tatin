(
 'This packages offers the method `Process` which is useful to handle application errors on a general (or application) level. '
 '`Process` in turn is triggered via `⎕TRAP`. Use thefunction `HandleError.SetTrap` in order to set `⎕TRAP` accordingly.'
 ''
 'Note that the main function, `HandleError.Process`, will run in the same thread the error did ouccur in. However, while the code of that function is executed, '
 'thread switches may well occur. To prevent other threads from invoking `HandleError.Process` it uses `:Hold`.'
 ''
 '## Goals'
 ''
 'The goal of `HandleError` is to collect as many pieces of information as posssible and make'
 'them accessible so that they can later be used to analyze (and hopefully solve) the problem.\\'
 'In order to achieve this `HandleError` takes the following actions, if technically possible:'
 ''
 '* Create an HTML page with essential information regarding the error, for example:'
 ''
 '  * Error message'
 '  * Stack'
 '  * System vars like `⎕WSID`, `⎕IO`, `⎕ML`, `⎕TNUMS`, `⎕WA`'
 '  * Current directory'
 '  * Command line'
 '  * and more'
 '  '
 '* Create a namespace `crash` and populate it with variables providing information'
 '  potentially important for analyzing the error.'
 '  The namespace `crash` is saved in a component file. By default all variables'
 '  visible at the time of the crash are saved in a sub namespace of `crash` called'
 '  `Vars`.'
 ''
 '  In case of a threaded application this and the HTML page might be all you get'
 '  for analyzing the problem.\\'
 ''
 '* Attempt to save an error workspace. Since no workspace can be saved when threads'
 '  are running, `HandleError` will kill all running threads but the main thread just before'
 '  attempting to save the workspace. That means that even in a multi-threaded application'
 '  you _might_ still get a saved workspace for analyzing purposes if the error happened to'
 '  occur in the main thread.'
 ''
 '  However, since version 4.1 it is possible to prevent the killing of threads by setting'
 '  `killThreads` to 0, meaning it defaults to 1, so no change in behaviour by default.'
 '  '
 '  Set this to 0 if you intend to let the application continue, for example because an error'
 '  occurred just in a single thread, but the application as such is expected to be okay.'
 ''
 '## Parameters'
 ''
 'All parameters can be changed by setting variables in a namespace returned by `CreateParms`,'
 'which can then be passed as right argument to the main function `Process`.'
 'For defaults just pass an empty vector to `Process`.'
 ''
 '## Custom stuff'
 ''
 'You can make `Process` execute your own code by specifying a custom log function'
 'and / or a custom function for other purposes:      '
 ''
 '* `logFunction` is supposed to be the name of a monadic function that returns a shy result.'
 '  That function must be able to deal with a simple character vector as well as vectors of'
 '  character vectors. As the name suggests it will be called by `Process` when something needs'
 '  to be logged.'
 ''
 '* `customFns` can be used to do anything you like. A typical application for this'
 '  is sending an email to notify certain people about the crash.\\'
 '  The `customFns` must accept  a right argument. This is the parameter namespace'
 '  which holds all the parameters plus three additional variables:'
 ''
 '  * `crashFilename` holds the name used for the crash files (HTML file, workspace,'
 '    DCF file) but without `.extension`'
 '  * `LastError` holds `⎕DMX.DM` at the moment of the crash'
 '  * `LastErrorNumber` holds `⎕DMX.EN` at the moment of the crash\\'
 '  '
 ' The last two steps are necessary because something might go wrong inside `HandleError` and,'
 ' though trapped, as a side effect overwrite both `⎕DMX.DM` and `⎕DMX.EN`.\\'
 ' The `customFns` shall not return a result. If it does it must be "shy" and will be ignored.\\'
 ''
 'Although both function names may use dotted syntax, that would not help in case'
 'they live in an instance of a class. In such a case use `logFunctionParent`'
 'and `customFnsParent` respectively in order to define the parent of the functions.\\'
 ''
 '## Windows Event Log'
 ''
 '`HandleError` will attempt to write to the Windows Event Log when `windowsEventSource`'
 'is not empty. For that to work both .NET and the Dyalog bridge DLLs are required.'
 'That means it would not work out of the box in a runtime application without you taking action,'
 'though it would of course work in development.'
 ''
 '## How tos'
 ''
 '* At an early stage (we don''t know yet where to save stuff etc) specify an'
 '  empty vector as right argument to `SetTrap`.'
 '* As soon as you can create a parameter space by calling `CreateParms` carry out the following steps:'
 '  1. Execute `#.⎕SHADOW ''ErrorParms''` from within your `⎕LX` function --- note the `#.` in front of '
 '     `⎕SHADOW`; this ensure that it behaves like a normal namespae in root, yet it will disappear'
 '     once your `⎕LX`function quits.'
 '  2. Create a paramter space like `#.ErrorParms` by calling `HandleError.CreateParms`.'
 '  3. Make amendments '
 '  '
 '     That way `Process` will be able to see `#.ErrorParms` from everywhere no matter what.'
 '  4. Execute `⎕TRAP←#.HandleError.SetTrap #.ErrorParms`'
 ''
 '## Notes'
 ''
 'Prior to version 2.2.0 `HandleError` saved crash files in a folder `Errors`'
 'that was created as a sibling of either the workspace or the stand-alone'
 'EXE. While this policy still holds true under Linux and Mac OS, under Windows'
 'a folder with the name of either the EXE or the WS is created'
 'within %LOCALAPPDATA%, with a sub-folder "Errors" inside it.'
 ''
 'This is because under Windows the application is unlikely to have the right to'
 'write to the directory the EXE was loaded from.\\'
 ''
 'Kai Jaeger'
 ''
 'Homepage: <https://github.com/aplteam/HandleError>'
 ''
 ''
)
