 r←{noBetas}GetBestVersionNumber path;best;buff;buff2;id;list;list2;listOfDirs;path_;version
⍝ Establishes the best version number for ⍵
⍝ See test group "GetBestVersion" for all possibilities.
⍝ Returns an empty vector in case nothing fits.
⍝ Throws an error if no group was specified but more than one group has a fit for the package name
 noBetas←{0<⎕NC ⍵:⍎⍵ ⋄ GetNoBetasDefault}'noBetas '
 r←''
 path←F.NormalizePath path
 id←(≢RemovePackageID path)↓path
 path_←(-≢id)↓path
 :If IsValidPackageName id
     ⍝ We first need to establish the group:
     path←{⍵↓⍨-≢'/\'A.Last ⍵}path
     listOfDirs←F.ListDirs path,'*'
     :If 0=≢listOfDirs
         :Return
     :EndIf
     buff←((⊂⎕C id)≡¨(≢id)↑¨⎕C{⍵↑⍨¯1+⍵⍳'-'}¨{⍵↓⍨⍵⍳'-'}¨(≢path)↓¨listOfDirs)/listOfDirs
     :If 0=≢buff
         :Return
     :EndIf
     buff2←∪{⍵↑⍨¯1+⍵⍳'-'}¨(≢path)↓¨buff
     ((⍕≢buff2),' groups have a package with the given name')Assert 1=≢buff2
     id←({⍵↑⍨⍵⍳'-'}{⍵↑⍨1+-⌊/(⌽⍵)⍳'/\'}⊃buff),id
     path,←id
 :EndIf
 :If 0<≢list←,GetAllPackages path_
 :AndIf 0<≢list←('.zip'∘≢¨⎕C¨3⊃∘⎕NPARTS¨list)/list
     :If HasGroup id
         list←((⎕C{⍵,(1≥'-'+.=⍵)/'-'}id){⍺∘≡¨⎕C(≢⍺)↑¨⍵}list)/list
     :Else
         list←((⎕C{⍵,(1>'-'+.=⍵)/'-'}id){⍺∘≡¨⎕C(≢⍺)↑¨⍵}{(⍵↓⍨+⍵⍳'-')}¨list)/list
     :EndIf
 :AndIf 0<≢list
     :If noBetas
     :AndIf 0=≢list←({3>⌈/+\'-'=⍵}¨list)/list   ⍝ Remove all beta versions
         :Return
     :EndIf
     list2←path_ InjectPublishingDate list      ⍝ Add publishing date where required
     list←list[SortIndexForPackageIDs list2]
     best←⊃¯1↑list
     version←{1↓⍵/⍨2≤+\'-'=⍵}⊃,/best
     :If IsValidPackageID_WithoutPatchNo version
         version←({⍵/⍨2>+\'-'=⍵}path),'-',version
     :Else
         r←path_,({⍵/⍨2>+\'-'=⍵}best),'-',version
     :EndIf
 :EndIf
