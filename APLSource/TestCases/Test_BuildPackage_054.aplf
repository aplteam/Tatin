 r←Test_BuildPackage_054(stopFlag batchFlag);⎕TRAP;path;zipFileName;list;cfg2;oldBuildNo;newBuildNo;cfg;tempDir;tempDir2;deps;msg;rc;parms
⍝ Build a package and specify a specific version number without a build number
 ⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
 r←T._Failed

 tempDir←∆GetTempDir''
 tempDir ⎕NCOPY ∆TEMP_TEST_DATA,'/Build/Special'
 path←tempDir,'/Special/'

 cfg←TC.GetPackageConfigFileAsNS path,'apl-package.json'
 parms←TC.CreateBuildParms path
 parms.targetPath←path
 parms.dependencyFolder←'dependencies'
 parms.version←'9.0.1'
 zipFileName←TC.BuildPackage parms
 list←TC.ZipArchive.ListZipContents zipFileName
 →T.GoToTidyUp~(⊂F.EnforceSlash'apl-dependencies.txt')∊F.EnforceSlash¨list
 tempDir2←∆GetTempDir'-ZIP'
 zipFileName TC.ZipArchive.UnzipTo tempDir2
 deps←⊃F.NGET(tempDir2,'/apl-dependencies.txt')1
 →T.GoToTidyUp(,⊂'aplteam-FilesAndDirs-5.2.1')≢deps
 cfg2←TC.GetPackageConfigFileAsNS path,'apl-package.json'
 oldBuildNo←A.ToNum{⍵↓⍨⍵⍳'+'}cfg.version
 newBuildNo←A.ToNum{⍵↓⍨⍵⍳'+'}cfg2.version
 →T.GoToTidyUp newBuildNo≠oldBuildNo+1

 r←T._OK

∆TidyUp:
 F.DeleteFile zipFileName
 (rc msg)←F.RmDirByForce tempDir
 msg Assert rc=0
 (rc msg)←F.RmDirByForce tempDir2
 msg Assert rc=0
⍝Done
