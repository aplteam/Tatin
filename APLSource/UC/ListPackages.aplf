 r←ListPackages Arg;registry;parms;buff;qdmx;OSs
 r←''
 registry←Arg._1
 :If 0≡registry
     registry←tatinURL
 :ElseIf (,'?')≡,registry
     →(⍬≡registry←SelectRegistry 0)/0
 :EndIf
 registry←EnforceSlash registry
 parms←⎕NS''
 :If 0≢Arg.group
     parms.group←Arg.group
 :EndIf
 :If 0≢Arg.tags
     parms.tags←Arg.tags
 :EndIf
 :If 0≢Arg.noaggr
     parms.aggregate←~Arg.noaggr
 :Else
     parms.aggregate←1
 :EndIf
 parms.userCommand←Arg.uc
 parms.date←Arg.date
 :If 0≢Arg.since
     :If '-'∊Arg.since
         parms.since←⊃(//)⎕VFI Arg.since~'-'
     :Else
         parms.since←(4↑Arg.since),'-',(2↑4↓Arg.since),'-',2↑6↓Arg.since
     :EndIf
 :EndIf
 :If 0≢Arg.os
     OSs←⎕C','(≠⊆⊢)Arg.os
     'Only "lin", "mac" and "win" are valid options for -os='Assert∧/OSs∊'win' 'lin' 'mac'
     parms.os_lin←(⊂'lin')∊OSs
     parms.os_mac←(⊂'mac')∊OSs
     parms.os_win←(⊂'win')∊OSs
 :EndIf
 parms.project_url←Arg.project_url
 :If parms.dependencies←Arg.Switch'dependencies'
     parms.aggregate←0
 :EndIf
 :If parms.latest←Arg.latest
     parms.dependencies←0
     parms.aggregate←1
 :EndIf
 :Trap ErrNo
     r←⍪parms TC.ListPackages registry
 :Else
     qdmx←⎕DMX
     ⎕SIGNAL/CheckForInvalidVersion qdmx
 :EndTrap
 :If 0=≢r
     r←'No packages found'
 :Else
     :If TC.IsInstallFolder registry
         r[;2]←' *'[1+r[;2]]
         r(AddHeader)←'Package-ID' 'Principal' 'Source' 'Installed'
     :Else
         :If 0≡parms.date
             r(AddHeader)←(2⊃⍴r)↑(('[*]'{⍺≡(≢⍺)↑⍵}registry)/⊂'Registry'),('Group & Name' 'Package ID'[1+parms.latest]),((parms.aggregate)/⊂'# major versions'),(⊂'Project URL')
             :If parms.dependencies
                 r[1;1]←⊂(1⊃r[1;]),' with dependencies'
             :EndIf
         :Else
             r(AddHeader)←(2⊃⍴r)↑(('[*]'{⍺≡(≢⍺)↑⍵}registry)/⊂'Registry'),'Group & Name' 'Published at' 'Project URL'
         :EndIf
         buff←{'['∊⍵:⍵↑⍨⍵⍳']' ⋄ ⊃TC.Reg.SeparateUriAndPackageID ⍵}registry
         r←((2⊃⍴r)↑(('Registry: ',{⍵↓⍨-'/'=¯1↑⍵}buff))('≢ ',⍕≢r)'')⍪r
     :EndIf
 :EndIf
