 r←LoadDependencies Arg;installFolder;f1;f2;targetSpace;saveIn;overwriteFlag;isUCMD;makeHomeRelative;projects;ind;projectName;projectFolder;projCfg;installFolders;buff
 installFolder←{0≡⍵:'' ⋄ ⍵}Arg._1
 targetSpace←{0≡⍵:'' ⋄ ⍵}Arg._2
 isUCMD←'[myucmds]'{⍺≡⎕C(≢⍺)↑⍵}installFolder
 :If 0=≢installFolder,targetSpace
     'No folder specified, and Cider is not available'Assert 0<⎕SE.⎕NC'Cider'
     projects←⎕SE.Cider.ListOpenProjects 0
     'No folder specified, and there are not open Cider projects'Assert 0<≢projects
     :If 1=≢projects
         (projectName projectFolder)←projects[1;]
     :Else
         ind←⊃'SelectProjectForLoadDependencies@Select project to load dependencies from:'##.Client.CommTools.Select projects[;1]
         :If 0=≢ind
             r←'Cancelled by user' ⋄ →0
         :EndIf
         (projectName projectFolder)←projects[ind;]
     :EndIf
     projCfg←⎕SE.Cider.##.Get_JSON5 projectFolder,'/cider.config'
     installFolders←''
     :If 0<⎕NC'projCfg.CIDER.dependencies.tatin'
         installFolders,←{0=≢⍵:⍵ ⋄ ⊂⍵}projCfg.CIDER.dependencies.tatin
     :EndIf
     :If 0<⎕NC'projCfg.CIDER.dependencies_dev.tatin'
         installFolders,←{0=≢⍵:⍵ ⋄ ⊂⍵}projCfg.CIDER.dependencies_dev.tatin
     :EndIf
     ('<',projectName,'> does not have any packages installed')Assert 0<≢installFolders
     :If 1=≢installFolders
         installFolder←projectFolder,'/',1⊃installFolders
         targetSpace←projCfg.CIDER.(parent,'.',projectSpace)
     :Else
         ind←⊃'SelectLoadFolderForLoadDependencies@Select folder to load dependencies from:'##.Client.CommTools.Select(⊂projectFolder,'/'),¨({'='∊⍵:⍵↑⍨¯1+⍵⍳'=' ⋄ ⍵}¨installFolders),¨'/'
         :If 0=≢ind
             r←'Cancelled by user' ⋄ →0
         :EndIf
         buff←{'='∊⍵:'='(≠⊆⊢)⍵ ⋄ ⍵''}ind⊃installFolders
         installFolder←projectFolder,'/',1⊃buff
         targetSpace←projCfg.CIDER.(parent,'.',projectSpace),{0=≢⍵:⍵ ⋄ '.',⍵},2⊃buff
     :EndIf
 :Else
     :If 0=≢targetSpace
         :If isUCMD
             targetSpace←'⎕SE'
         :Else
             targetSpace←CalledFrom ⎕NSI
         :EndIf
     :Else
         :If ~(⊃targetSpace)∊'⎕#'
             targetSpace←(CalledFrom ⎕NSI),'.',targetSpace
         :EndIf
     :EndIf
 :EndIf
 :If isUCMD
     '[MyUCMDs] must not stand on its own'Assert 0<≢(≢'[myucmds]')↓installFolder
     installFolder←TC.GetMyUCMDsFolder{⍵↓⍨⍵⍳']'}installFolder
 :EndIf
 overwriteFlag←Arg.overwrite
 makeHomeRelative←Arg.makeHomeRelative
 installFolder←'apl-dependencies.txt'{⍵↓⍨(-≢⍺)×⍺≡(-≢⍺)↑⍵}installFolder
 f1←TC.F.IsDir installFolder
 :If ~isUCMD
     f2←(TC.F.IsFile installFolder)∧'.zip'≡⎕C ¯4↑installFolder
     ('Neither a folder nor a ZIP file: ',installFolder)Assert f1∨f2
 :EndIf
 :If ~(⊂,1 ⎕C targetSpace)∊,¨'#' '⎕SE'
     '"targetSpace" is not a valid APL name'Assert ¯1≠⎕NC targetSpace
 :EndIf
 saveIn←⍎{⍵↑⍨¯1+⍵⍳'.'}targetSpace
 ({⍵↓⍨⍵⍳'.'}targetSpace)saveIn.⎕NS''
 :If 0=saveIn.⎕NC targetSpace
     ((1+≢saveIn)↓targetSpace)saveIn.⎕NS''
 :EndIf
 'Arg[2] must not be scripted'Assert IsScripted⍎targetSpace
 r←(TC.Reg.BitsToInt overwriteFlag makeHomeRelative)TC.LoadDependencies installFolder targetSpace
 r←⍪(⊂'Dependencies loaded into ',targetSpace,':'),r
